Тестовое задание работает.

Зависимости:
    DBIx::Class
    Email::Valid - для валидации email

etc/loan.sql     - sql для создания БД. client и loan
lib/DB.pm        - подключение к БД. Также, реализация DB->model('Loan')->validate(...)

lib/Validator.pm - базовый класс валидатора. Его наследуют все классы из папки lib/Validator/
lib/Validator/   - в папке лежат классы валидацити.

lib/test_validator.pm - использовал для проверки работоспособности.

lib/Schema.pm    - подключение схемы DBIx
lib/Schema/      - стандартное описание моделей DBIx (созданы генератором, как и говорили).


Реализация:

    lib/Validator.pm - родительский класс.

    Метод validate принимает параметры, проверяет skip-ы, проверяет undef-ы. 
    Затем, используя UNIVERSAL->can(), проверяет существование метода у потомка.
    Если метод описан, он вызывается и происходит валидация. Название метода в дочернем классе соответствует названию параметра для валидации.

    Также в Validator.pm описаны common-методы валидации. Наприме, метод проверки email или метод валидации процентов.
    Там, где необходимо, значения констант указаны принудительно.

В сумме потрачено около дня.

Это Perl, а значит всегда можно сделать по другому,.
